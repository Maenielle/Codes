def relationship_status(from_member, to_member, social_graph):
    '''Relationship Status.

    Parameters
    ----------
    from_member: str
        the subject member
    to_member: str
        the object member
    social_graph: dict
        the relationship data

    Returns
    -------
    str
        "follower" if fromMember follows toMember,
        "followed by" if fromMember is followed by toMember,
        "friends" if fromMember and toMember follow each other,
        "no relationship" if neither fromMember nor toMember follow each other.
    '''
    from_following = social_graph.get(from_member, {}).get("following", [])
   
    follows = to_member in from_following
    
    to_following = social_graph.get(to_member, {}).get("following", [])
   
    followed_by = from_member in to_following
    
    if follows and followed_by:
        return "friends"
    elif follows:
        return "follower"
    elif followed_by:
        return "followed by"
    else:
        return "no relationship"
    
def tic_tac_toe(board):
    '''Tic Tac Toe.

    Parameters
    ----------
    board: list
        the representation of the tic-tac-toe board as a square list of lists

    Returns
    -------
    str
        the symbol of the winner or "NO WINNER" if there is no winner
    '''
    size = len(board)
    
    for row in board:
        if len(set(row)) == 1 and row[0] != '':
            return row[0]
    
    for col in range(size):
        column = [board[row][col] for row in range(size)]
        if len(set(column)) == 1 and column[0] != '':
            return column[0]
    
    main_diagonal = [board[i][i] for i in range(size)]
    if len(set(main_diagonal)) == 1 and main_diagonal[0] != '':
        return main_diagonal[0]
    
    anti_diagonal = [board[i][size - 1 - i] for i in range(size)]
    if len(set(anti_diagonal)) == 1 and anti_diagonal[0] != '':
        return anti_diagonal[0]
    
    return "NO WINNER"

def eta(first_stop, second_stop, legs):
    total_time = 0  
    current_stop = first_stop  

   
    while current_stop != second_stop:
        for (from_stop, to_stop), data in legs.items():
            if from_stop == current_stop:
                travel_time = data['travel_time_mins']
                total_time += travel_time  
                current_stop = to_stop  
                break  
    
    return total_time